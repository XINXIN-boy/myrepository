<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--扫描注解-->
    <context:component-scan base-package="com.itqf.demo04.aop com.itqf.demo04.dao"></context:component-scan>
    <!-- aop的扫描 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
<!--    <context:component-scan base-package="com.itqf.demo04.aop com.itqf.demo04.dao"></context:component-scan>-->
<!--    -->
<!--    <aop:config >-->
<!--        &lt;!&ndash; 切入点，对哪些方法织入切面方法 &ndash;&gt;-->
<!--        &lt;!&ndash;-->
<!--            execution([修饰符]　返回值类型　方法名(参数)　［异常模式］)　[]表示可选部分-->
<!--            第一个* 任意返回类型-->
<!--            com.rr.aop 包-->
<!--            第二个*  包下面的任意类-->
<!--            *(..)  任意名称和参数的方法-->
<!--        &ndash;&gt;-->
<!--        <aop:pointcut id="point" expression="execution(* com.itqf.demo04.dao..*.*(..))"/>-->
<!--        &lt;!&ndash;  切面类  ref指向切面类的bean  这个时候，可以给他实例化一个bean在xml中  当然也可以用注解  &ndash;&gt;-->
<!--        <aop:aspect ref="userAop">-->
<!--            &lt;!&ndash; 后置通知 ，不管目标方法正常执行还是异常，都会调用-->
<!--             method="after"  切面类之中的方法-->
<!--             pointcut-ref="point"  切点的引用 &ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after method="after" pointcut-ref="point" ></aop:after>&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:before method="before" pointcut-ref="point" ></aop:before>&ndash;&gt;-->
<!--            <aop:after-returning method="afterReturn" pointcut-ref="point" returning="result" ></aop:after-returning>-->
<!--&lt;!&ndash;            <aop:around method="around" pointcut-ref="point" ></aop:around>&ndash;&gt;-->
<!--&lt;!&ndash;            <aop:after-throwing method="throwth" pointcut-ref="point" throwing="ex"></aop:after-throwing>&ndash;&gt;-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->


</beans>